package cp213;

import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;

/**
 * Stores a HashMap of MenuItem objects and the quantity of each MenuItem
 * ordered. Each MenuItem may appear only once in the HashMap.
 *
 * @author Mubin Qureshi
 * @author Abdul-Rahman Mawlood-Yunis
 * @author David Brown
 * @version 2021-11-01
 */
public class Order implements Printable {

    /**
     * The current tax rate on menu items.
     */
    public static final BigDecimal TAX_RATE = new BigDecimal(0.13);
    private Map<MenuItem, Integer> items = new HashMap<MenuItem, Integer>();

    /**
     * Update the quantity of a particular MenuItem in an order.
     *
     * @param item     The MenuItem to purchase - the HashMap key.
     * @param quantity The number of the MenuItem to purchase - the HashMap value.
     */
    public void add(MenuItem item, int quantity) {

	items.put(item, quantity);
    }

    /**
     * Calculates the total value of all MenuItems and their quantities in the
     * HashMap.
     *
     * @return the total price for the MenuItems ordered.
     */
    public BigDecimal getSubTotal() {

		BigDecimal temp = new BigDecimal(0);

		for (Map.Entry<MenuItem, Integer> item : this.items.entrySet()) {
			BigDecimal price = new BigDecimal(item.getKey().getPrice().doubleValue() * item.getValue());
			temp = temp.add(price);
		}

		return temp;
	}

    /**
     * Calculates and returns the total taxes to apply to the subtotal of all
     * MenuItems in the order. Tax rate is TAX_RATE.
     *
     * @return total taxes on all MenuItems
     */
    public BigDecimal getTaxes() {

	BigDecimal taxes = this.getSubTotal().multiply(TAX_RATE);

	return taxes;
    }

    /**
     * Calculates and returns the total price of all MenuItems order, including tax.
     *
     * @return total price
     */
    public BigDecimal getTotal() {

	BigDecimal total = this.getSubTotal().add(getTaxes());

	return total;
    }

    /**
     * Returns a String version of a receipt for all the MenuItems in the order.
     */
    @Override
    public String toString() {
String receipt = "";
    	
//    	for (Map.Entry< MenuItem, Integer> item: this.items.entrySet()) {
//    		receipt += String.format("%-14s%2d @ $5.2f = $6.2f", item.getKey().getName().toString(), item.getKey().getPrice().toString(), item.getKey().getPrice().doubleValue() * item.getValue()) + "\n";
//    	}
            
        receipt += "\n";
        receipt+= String.format("%-28s$.2f",  "Subtotal: ", this.getSubTotal()) + "\n";
        receipt += String.format("%-28s$.2f",  "Taxes: ", this.getTaxes()) + "\n";
        receipt += String.format("%-28s$.2f",  "Total: ", this.getTotal()) + "\n";	
        	
	return receipt;
    }

    /**
     * Replaces the quantity of a particular MenuItem in an Order with a new
     * quantity. If the MenuItem is not in the order, it is added. If quantity is 0
     * or negative, the MenuItem is removed from the Order.
     *
     * @param item The MenuItem to update
     * @param quantity The quantity to apply to item
     */
    public void update(MenuItem item, int quantity) {

    	if (quantity > 0 ) {
    		this.items.put(item, quantity);
    	}
    	else if  (quantity == 0 ) {
    		this.items.remove(item);
    	}
    }

    /*
     * Implements the Printable interface print method. Prints lines to a Graphics2D
     * object using the drawString method. Prints the current contents of the Order.
     */
    @Override
    public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
	int result = PAGE_EXISTS;

	if (pageIndex == 0) {
	    Graphics2D g2d = (Graphics2D) graphics;
	    g2d.setFont(new Font("MONOSPACED", Font.PLAIN, 12));
	    g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());
	    int y = 50;
	    String[]x = String.valueOf(this).split("\n");
	    
	    int height = g2d.getFontMetrics().getHeight();
	    for (String z : x) {
	    	g2d.drawString(z, 50, y);
	    	y += height;
	    }

	} else {
	    result = NO_SUCH_PAGE;
	}
	return result;
    }
}
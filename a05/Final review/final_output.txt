------------------------------
Start: Testing MData:

Testing create_mdata:
MData of type p created successfully
MData of type i created successfully
Error(create_data): invalid data type
Error(create_mdata): invalid pointer

Testing print_mdata:
type = process, value = [30](1000010000,1)
type = integer, value = 10
Error(print_mdata): unsupported data
<NULL MData>

Testing copy_mdata:
Copy data of type p: type = process, value = [30](1000010000,1)
Copy data of type i: type = integer, value = 10
Copy data of type f: Error(copy_mdata): unsupported data
<NULL MData>

Testing destroy_mdata:
mdata of type p successfully destroyed
mdata of type i successfully destroyed

End: Testing MData
------------------------------

------------------------------
Start: Testing SJFS Scheduler

Launching SJFS Scheduler:

Received the following Queue:
Capacity = 23, Size = 23, front = 0, rear = 22
[2](1575910000,2)	[5](1379410001,3)	[9](1082710002,4)	[3](1282601992,3)	[6](1393712003,2)
[10](1450910003,1)	[11](1091110004,4)	[13](1289010005,2)	[17](1277110006,3)	[18](1745910007,1)
[19](1805010008,6)	[22](1769610009,7)	[23](1286810010,5)	[25](1070210011,7)	[99](1322410018,4)
[34](1287810014,8)	[26](1170310012,8)	[30](1768910013,2)	[37](1612310015,3)	[40](1162710016,3)
[42](1975910017,8)	[44](1927910018,5)	[48](1169510019,3)	

Converting Queue to Stack:
Stack Size = 23
[2](1575910000,2)
[3](1282601992,3)
[5](1379410001,3)
[6](1393712003,2)
[9](1082710002,4)
[10](1450910003,1)
[11](1091110004,4)
[13](1289010005,2)
[17](1277110006,3)
[18](1745910007,1)
[19](1805010008,6)
[22](1769610009,7)
[23](1286810010,5)
[25](1070210011,7)
[26](1170310012,8)
[30](1768910013,2)
[34](1287810014,8)
[37](1612310015,3)
[40](1162710016,3)
[42](1975910017,8)
[44](1927910018,5)
[48](1169510019,3)
[99](1322410018,4)

[Timer:0]: Starting SJFS Scheduler
[Timer:1]: idle
Fetching Process: [2](1575910000,2)
[Timer:2]: [2](1575910000,2)
[Timer:3]: [2](1575910000,2)
Fetching Process: [3](1282601992,3)
[Timer:4]: [3](1282601992,3)
[Timer:5]: [3](1282601992,3)
[Timer:6]: [3](1282601992,3)
Fetching Process: [6](1393712003,2)
[Timer:7]: [6](1393712003,2)
[Timer:8]: [6](1393712003,2)
Fetching Process: [5](1379410001,3)
[Timer:9]: [5](1379410001,3)
[Timer:10]: [5](1379410001,3)
[Timer:11]: [5](1379410001,3)
Fetching Process: [10](1450910003,1)
[Timer:12]: [10](1450910003,1)
Fetching Process: [13](1289010005,2)
[Timer:13]: [13](1289010005,2)
[Timer:14]: [13](1289010005,2)
Fetching Process: [9](1082710002,4)
[Timer:15]: [9](1082710002,4)
[Timer:16]: [9](1082710002,4)
[Timer:17]: [9](1082710002,4)
[Timer:18]: [9](1082710002,4)
Fetching Process: [18](1745910007,1)
[Timer:19]: [18](1745910007,1)
Fetching Process: [17](1277110006,3)
[Timer:20]: [17](1277110006,3)
[Timer:21]: [17](1277110006,3)
[Timer:22]: [17](1277110006,3)
Fetching Process: [11](1091110004,4)
[Timer:23]: [11](1091110004,4)
[Timer:24]: [11](1091110004,4)
[Timer:25]: [11](1091110004,4)
[Timer:26]: [11](1091110004,4)
Fetching Process: [23](1286810010,5)
[Timer:27]: [23](1286810010,5)
[Timer:28]: [23](1286810010,5)
[Timer:29]: [23](1286810010,5)
[Timer:30]: [23](1286810010,5)
[Timer:31]: [23](1286810010,5)
Fetching Process: [19](1805010008,6)
[Timer:32]: [19](1805010008,6)
[Timer:33]: [19](1805010008,6)
[Timer:34]: [19](1805010008,6)
[Timer:35]: [19](1805010008,6)
[Timer:36]: [19](1805010008,6)
[Timer:37]: [19](1805010008,6)
Fetching Process: [30](1768910013,2)
[Timer:38]: [30](1768910013,2)
[Timer:39]: [30](1768910013,2)
Fetching Process: [22](1769610009,7)
[Timer:40]: [22](1769610009,7)
[Timer:41]: [22](1769610009,7)
[Timer:42]: [22](1769610009,7)
[Timer:43]: [22](1769610009,7)
[Timer:44]: [22](1769610009,7)
[Timer:45]: [22](1769610009,7)
[Timer:46]: [22](1769610009,7)
Fetching Process: [37](1612310015,3)
[Timer:47]: [37](1612310015,3)
[Timer:48]: [37](1612310015,3)
[Timer:49]: [37](1612310015,3)
Fetching Process: [40](1162710016,3)
[Timer:50]: [40](1162710016,3)
[Timer:51]: [40](1162710016,3)
[Timer:52]: [40](1162710016,3)
Fetching Process: [25](1070210011,7)
[Timer:53]: [25](1070210011,7)
[Timer:54]: [25](1070210011,7)
[Timer:55]: [25](1070210011,7)
[Timer:56]: [25](1070210011,7)
[Timer:57]: [25](1070210011,7)
[Timer:58]: [25](1070210011,7)
[Timer:59]: [25](1070210011,7)
Fetching Process: [44](1927910018,5)
[Timer:60]: [44](1927910018,5)
[Timer:61]: [44](1927910018,5)
[Timer:62]: [44](1927910018,5)
[Timer:63]: [44](1927910018,5)
[Timer:64]: [44](1927910018,5)
Fetching Process: [48](1169510019,3)
[Timer:65]: [48](1169510019,3)
[Timer:66]: [48](1169510019,3)
[Timer:67]: [48](1169510019,3)
Fetching Process: [26](1170310012,8)
[Timer:68]: [26](1170310012,8)
[Timer:69]: [26](1170310012,8)
[Timer:70]: [26](1170310012,8)
[Timer:71]: [26](1170310012,8)
[Timer:72]: [26](1170310012,8)
[Timer:73]: [26](1170310012,8)
[Timer:74]: [26](1170310012,8)
[Timer:75]: [26](1170310012,8)
Fetching Process: [34](1287810014,8)
[Timer:76]: [34](1287810014,8)
[Timer:77]: [34](1287810014,8)
[Timer:78]: [34](1287810014,8)
[Timer:79]: [34](1287810014,8)
[Timer:80]: [34](1287810014,8)
[Timer:81]: [34](1287810014,8)
[Timer:82]: [34](1287810014,8)
[Timer:83]: [34](1287810014,8)
Fetching Process: [42](1975910017,8)
[Timer:84]: [42](1975910017,8)
[Timer:85]: [42](1975910017,8)
[Timer:86]: [42](1975910017,8)
[Timer:87]: [42](1975910017,8)
[Timer:88]: [42](1975910017,8)
[Timer:89]: [42](1975910017,8)
[Timer:90]: [42](1975910017,8)
[Timer:91]: [42](1975910017,8)
[Timer:92]: idle
[Timer:93]: idle
[Timer:94]: idle
[Timer:95]: idle
[Timer:96]: idle
[Timer:97]: idle
[Timer:98]: idle
Fetching Process: [99](1322410018,4)
[Timer:99]: [99](1322410018,4)
[Timer:100]: [99](1322410018,4)
[Timer:101]: [99](1322410018,4)
[Timer:102]: [99](1322410018,4)
[Timer:103]: Closing SJFS Scheduler

End: Testing SJFS Scheduler
------------------------------

------------------------------
Start: Testing slice_stack


----------- Case 0 -----------

Before slice: s1 =
Stack Size = 0
<empty_stack>

Calling slice_stack(s1,2):
Error(slice_stack): cannot slice an empty stack

After slice: s1 =
Stack Size = 0
<empty_stack>

After slice: s2 =
Stack Size = 0
<empty_stack>

----------- Case 1 -----------

Before slice: s1 =
Stack Size = 10
[1000000](10,100)
[900000](9,90)
[800000](8,80)
[700000](7,70)
[600000](6,60)
[500000](5,50)
[400000](4,40)
[300000](3,30)
[200000](2,20)
[100000](1,10)

Calling slice_stack(s1,-1):
Error(slice_stack): invalid index

After slice: s1 =
Stack Size = 10
[1000000](10,100)
[900000](9,90)
[800000](8,80)
[700000](7,70)
[600000](6,60)
[500000](5,50)
[400000](4,40)
[300000](3,30)
[200000](2,20)
[100000](1,10)

After slice: s2 =
Stack Size = 0
<empty_stack>

----------- Case 2 -----------

Before slice: s1 =
Stack Size = 10
[1000000](10,100)
[900000](9,90)
[800000](8,80)
[700000](7,70)
[600000](6,60)
[500000](5,50)
[400000](4,40)
[300000](3,30)
[200000](2,20)
[100000](1,10)

Calling slice_stack(s1,9):

After slice: s1 =
Stack Size = 9
[900000](9,90)
[800000](8,80)
[700000](7,70)
[600000](6,60)
[500000](5,50)
[400000](4,40)
[300000](3,30)
[200000](2,20)
[100000](1,10)

After slice: s2 =
Stack Size = 1
[1000000](10,100)

----------- Case 3 -----------

Before slice: s1 =
Stack Size = 9
[900000](9,90)
[800000](8,80)
[700000](7,70)
[600000](6,60)
[500000](5,50)
[400000](4,40)
[300000](3,30)
[200000](2,20)
[100000](1,10)

Calling slice_stack(s1,5):

After slice: s1 =
Stack Size = 5
[500000](5,50)
[400000](4,40)
[300000](3,30)
[200000](2,20)
[100000](1,10)

After slice: s2 =
Stack Size = 4
[900000](9,90)
[800000](8,80)
[700000](7,70)
[600000](6,60)

----------- Case 4 -----------

Before slice: s1 =
Stack Size = 5
[500000](5,50)
[400000](4,40)
[300000](3,30)
[200000](2,20)
[100000](1,10)

Calling slice_stack(s1,0):

After slice: s1 =
Stack Size = 0
<empty_stack>

After slice: s2 =
Stack Size = 5
[500000](5,50)
[400000](4,40)
[300000](3,30)
[200000](2,20)
[100000](1,10)

----------- Case 5 -----------

Before slice: s1 =
Stack Size = 10
[1000000](10,100)
[900000](9,90)
[800000](8,80)
[700000](7,70)
[600000](6,60)
[500000](5,50)
[400000](4,40)
[300000](3,30)
[200000](2,20)
[100000](1,10)

Calling slice_stack(s1,15):

After slice: s1 =
Stack Size = 0
<empty_stack>

After slice: s2 =
Stack Size = 10
[1000000](10,100)
[900000](9,90)
[800000](8,80)
[700000](7,70)
[600000](6,60)
[500000](5,50)
[400000](4,40)
[300000](3,30)
[200000](2,20)
[100000](1,10)

End: Testing slice_stack
------------------------------

------------------------------
Start: Testing shift_queue

Testing special cases:
Error(shift_queue): Queue is empty
Error(shift_queue): Invalid shifts
Error(shift_queue): Invalid direction

Testing Left Shift:
Before: Capacity = 5, Size = 5, front = 0, rear = 4
[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	
After shift_queue(q,0,L):
Capacity = 5, Size = 5, front = 0, rear = 4
[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	

Before: Capacity = 5, Size = 5, front = 0, rear = 4
[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	
After shift_queue(q,1,L):
Capacity = 5, Size = 5, front = 0, rear = 4
[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	[1000000](1,10)	

Before: Capacity = 5, Size = 5, front = 0, rear = 4
[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	[1000000](1,10)	
After shift_queue(q,3,L):
Capacity = 5, Size = 5, front = 0, rear = 4
[5000000](5,50)	[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	

Before: Capacity = 5, Size = 5, front = 0, rear = 4
[5000000](5,50)	[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	
After shift_queue(q,4,L):
Capacity = 5, Size = 5, front = 0, rear = 4
[4000000](4,40)	[5000000](5,50)	[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	

Before: Capacity = 5, Size = 5, front = 0, rear = 4
[4000000](4,40)	[5000000](5,50)	[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	
After shift_queue(q,5,L):
Capacity = 5, Size = 5, front = 0, rear = 4
[4000000](4,40)	[5000000](5,50)	[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	

Before: Capacity = 5, Size = 5, front = 0, rear = 4
[4000000](4,40)	[5000000](5,50)	[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	
After shift_queue(q,7,L):
Capacity = 5, Size = 5, front = 0, rear = 4
[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	


Testing Right Shift:
Before: Capacity = 5, Size = 5, front = 0, rear = 4
[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	
After shift_queue(q,0,R):
Capacity = 5, Size = 5, front = 0, rear = 4
[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	

Before: Capacity = 5, Size = 5, front = 0, rear = 4
[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	
After shift_queue(q,1,R):
Capacity = 5, Size = 5, front = 0, rear = 4
[5000000](5,50)	[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	

Before: Capacity = 5, Size = 5, front = 0, rear = 4
[5000000](5,50)	[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	
After shift_queue(q,3,R):
Capacity = 5, Size = 5, front = 0, rear = 4
[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	[1000000](1,10)	

Before: Capacity = 5, Size = 5, front = 0, rear = 4
[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	[1000000](1,10)	
After shift_queue(q,4,R):
Capacity = 5, Size = 5, front = 0, rear = 4
[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	[1000000](1,10)	[2000000](2,20)	

Before: Capacity = 5, Size = 5, front = 0, rear = 4
[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	[1000000](1,10)	[2000000](2,20)	
After shift_queue(q,5,R):
Capacity = 5, Size = 5, front = 0, rear = 4
[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	[1000000](1,10)	[2000000](2,20)	

Before: Capacity = 5, Size = 5, front = 0, rear = 4
[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	[1000000](1,10)	[2000000](2,20)	
After shift_queue(q,7,R):
Capacity = 5, Size = 5, front = 0, rear = 4
[1000000](1,10)	[2000000](2,20)	[3000000](3,30)	[4000000](4,40)	[5000000](5,50)	

End: Testing shift_queue
------------------------------


----------- start of test_findPath() -----------
(Adjacency Matrix Representation): #Vertices = 6, #Edges = 5
Vertices: (0,V0) , (1,V1) , (2,V2) , (3,V3) , (4,V4)
(5,V5)
    -     1     -     -     -     - 
    -     -     1     -     -     - 
    -     -     -     -     1     - 
    1     -     -     -     -     - 
    -     -     -     -     -     1 
    -     -     -     -     -     - 

Path from Vertex (0) to Vertex (1):
(0)-->(1)
Distance = 1

Path from Vertex (1) to Vertex (0):
no path was found
Distance = 0

Path from Vertex (0) to Vertex (2):
(0)-->(1)-->(2)
Distance = 2

Path from Vertex (3) to Vertex (2):
(3)-->(0)-->(1)-->(2)
Distance = 3

Path from Vertex (3) to Vertex (5):
(3)-->(0)-->(1)-->(2)-->(4)-->(5)
Distance = 5

Path from Vertex (5) to Vertex (3):
no path was found
Distance = 0

Path from Vertex (1) to Vertex (4):
(1)-->(2)-->(4)
Distance = 2

----------- end of test_findPath() -----------
